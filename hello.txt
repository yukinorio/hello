import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import org.springframework.web.reactive.function.client.*;
import reactor.core.publisher.Mono;

import java.net.URI;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

public class WebClientMockTest {

    private WebClient webClient;
    private WebClient.RequestHeadersUriSpec requestHeadersUriSpecMock;
    private WebClient.RequestHeadersSpec requestHeadersSpecMock;
    private ClientResponse clientResponseMock;

    @BeforeEach
    void setUp() {
        webClient = Mockito.mock(WebClient.class);
        requestHeadersUriSpecMock = Mockito.mock(WebClient.RequestHeadersUriSpec.class);
        requestHeadersSpecMock = Mockito.mock(WebClient.RequestHeadersSpec.class);
        clientResponseMock = Mockito.mock(ClientResponse.class);

        when(webClient.get()).thenReturn(requestHeadersUriSpecMock);
        when(requestHeadersUriSpecMock.uri(any(URI.class))).thenReturn(requestHeadersSpecMock);
        when(requestHeadersSpecMock.exchangeToMono(any())).thenReturn(Mono.just(clientResponseMock));
    }

    @Test
void test404Error() {
    when(clientResponseMock.statusCode()).thenReturn(HttpStatus.NOT_FOUND);

    when(requestHeadersSpecMock.exchangeToMono(any())).thenAnswer(invocation -> {
        Function<ClientResponse, Mono<Void>> function = invocation.getArgument(0);
        return function.apply(clientResponseMock);
    });

    webClient.get()
            .uri(URI.create("http://localhost:8080"))
            .exchangeToMono(response -> {
                if (response.statusCode().isError()) {
                    System.out.println(response.statusCode());
                }
                return Mono.empty();
            }).block();
}
}
