try (MockedStatic<MyClass> mockedStatic = Mockito.mockStatic(MyClass.class);
     MockedStatic<BuiltInAssertions> assertionsMockedStatic = Mockito.mockStatic(BuiltInAssertions.class)) {

    // System.out.println()をモック化
    PrintStream outMock = Mockito.mock(PrintStream.class);
    System.setOut(outMock);

    WebClient.RequestHeadersSpec<?> requestHeadersSpecMock = Mockito.mock(WebClient.RequestHeadersSpec.class);
    WebClient.RequestHeadersUriSpec<?> requestHeadersUriSpecMock = Mockito.mock(WebClient.RequestHeadersUriSpec.class);
    WebClient.Builder webClientBuilderMock = Mockito.mock(WebClient.Builder.class);
    WebClient webClientMock = Mockito.mock(WebClient.class);

    when(webClientMock.get()).thenReturn(requestHeadersUriSpecMock);
    when(requestHeadersUriSpecMock.uri(any(URI.class))).thenReturn(requestHeadersSpecMock);
    when(webClientBuilderMock.build()).thenReturn(webClientMock);

    // exchangeToMono()のモック化
    when(requestHeadersSpecMock.exchangeToMono(any()))
            .thenAnswer(invocation -> {
                // テスト対象のラムダ式を取得
                Function<ClientHttpResponse, Mono<MyClass>> function = invocation.getArgument(0);

                // レスポンスのモックを作成
                ClientHttpResponse responseMock = Mockito.mock(ClientHttpResponse.class);
                HttpStatus statusMock = HttpStatus.NOT_FOUND; // ここを適切なステータスコードに設定
                when(responseMock.getStatusCode()).thenReturn(statusMock);

                // ラムダ式を呼び出す
                return function.apply(responseMock);
            });

    WebClient.builder().exchangeFunction(exchangeFunction).build();
    MyClass.request("http://localhost:8080");

    // System.out.println()が呼び出されたことを確認
    Mockito.verify(outMock).println(anyString());
}
