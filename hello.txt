https://github.com/mrdoob/three.js/blob/master/examples/jsm/loaders/GLTFLoader.js

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Simple Three.js Example with OrbitControls</title>
  <style>
    body { margin: 0; }
    canvas { display: block; }
  </style>
</head>
<body>
  <script type="module">
    import * as THREE from 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.module.min.js';
    import { GLTFLoader } from './GLTFLoader.js';
    import { OrbitControls } from './OrbitControls.js';

    // Create a scene
    const scene = new THREE.Scene();

    // Create a camera
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 5;

    // Create a WebGLRenderer and add it to the DOM
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Add lighting
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
    directionalLight.position.set(0, 1, 1);
    scene.add(directionalLight);

    // Load the GLTF models
    const loader = new GLTFLoader();
    loader.load('model1.gltf', (gltf) => {
      scene.add(gltf.scene);
    });
    loader.load('model2.gltf', (gltf) => {
      scene.add(gltf.scene);
    });

    // Add OrbitControls
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;

    // Animation loop
    function animate() {
      requestAnimationFrame(animate);

      // Update OrbitControls
      controls.update();

      // Render the scene
      renderer.render(scene, camera);
    }

    animate();

    // Handle window resize
    window.addEventListener('resize', function () {
      const width = window.innerWidth;
      const height = window.innerHeight;
      renderer.setSize(width, height);
      camera.aspect = width / height;
      camera.updateProjectionMatrix();
    });

  </script>
</body>
</html>





















import json
from lxml import etree
import pyproj
from geojson import Feature, Point, FeatureCollection


def citygml_to_geojson(citygml_file):
    tree = etree.parse(citygml_file)
    root = tree.getroot()

    nsmap = {
        "gml": "http://www.opengis.net/gml",
        "citygml": "http://www.opengis.net/citygml/2.0"
    }

    pos_elements = root.xpath("//gml:pos", namespaces=nsmap)
    coordinates = []

    for pos_element in pos_elements:
        coord = list(map(float, pos_element.text.split()))
        coordinates.append(coord)

    # 座標変換
    in_proj = pyproj.Proj("EPSG:2443")  # CityGMLのEPSGコードに合わせて変更してください
    out_proj = pyproj.Proj("EPSG:4326")

    features = []
    for coord in coordinates:
        x, y = pyproj.transform(in_proj, out_proj, coord[0], coord[1])
        point = Point((x, y))
        feature = Feature(geometry=point)
        features.append(feature)

    feature_collection = FeatureCollection(features)

    return feature_collection


citygml_file = "path/to/your/citygml/file.gml"
geojson_data = citygml_to_geojson(citygml_file)

with open("output.geojson", "w") as f:
    json.dump(geojson_data, f, ensure_ascii=False, indent=2)




import json
from lxml import etree
from shapely.geometry import Polygon

def citygml_v1_to_geojson(input_file, output_file):
    # XML ファイルをパースする
    tree = etree.parse(input_file)
    root = tree.getroot()

    # 名前空間を取得する
    ns = root.nsmap
    ns_gml = "{" + ns["gml"] + "}"
    ns_citygml = "{" + ns["citygml"] + "}"

    # GeoJSON 用の features を格納するリストを初期化する
    features = []

    # 建物情報を取得する
    buildings = root.findall(".//" + ns_citygml + "Building")
    for building in buildings:
        # 建物のポリゴン情報を取得する
        polygons = building.findall(".//" + ns_gml + "Polygon")
        for polygon in polygons:
            # 座標を取得する
            pos_list = polygon.find(".//" + ns_gml + "posList")
            coordinates = [float(coord) for coord in pos_list.text.split()]

            # 座標を組み替えて (x, y) タプルのリストにする
            reshaped_coordinates = [(coordinates[i], coordinates[i + 1]) for i in range(0, len(coordinates), 2)]

            # Shapely の Polygon オブジェクトを作成する
            shapely_polygon = Polygon(reshaped_coordinates)

            # GeoJSON 形式の feature を作成する
            feature = {
                "type": "Feature",
                "geometry": shapely.geometry.mapping(shapely_polygon),
                "properties": {}  # 必要に応じて CityGML から追加のプロパティを抽出
            }

            # features リストに追加する
            features.append(feature)

    # GeoJSON オブジェクトを作成する
    geojson = {
        "type": "FeatureCollection",
        "features": features
    }

    # GeoJSON ファイルに出力する
    with open(output_file, "w") as f:
        json.dump(geojson, f, indent=2)

# 使用例
input_file = "path/to/your/citygml_v1_file.gml"
output_file = "path/to/your/output.geojson"
citygml_v1_to_geojson(input_file, output_file)














import json
import struct
from pygltflib import GLTF2
from geojson import Point, Feature, FeatureCollection

def glb_to_geojson(input_glb, output_geojson):
    gltf = GLTF2().load(input_glb)

    features = []
    for accessor_idx, accessor in enumerate(gltf.accessors):
        if accessor.type == "VEC3" and accessor.componentType == 5126 and accessor.bufferView is not None:  # VEC3 and type Float32
            buffer_view = gltf.bufferViews[accessor.bufferView]
            buffer = gltf.buffers[buffer_view.buffer]

            coords = []
            for i in range(accessor.count):
                byte_offset = buffer_view.byteOffset + accessor.byteOffset + (i * accessor.byteStride)
                coord = struct.unpack_from('<fff', buffer.data, byte_offset)
                coords.append(coord)

            for coord in coords:
                point = Point((coord[0], coord[1], coord[2]))
                feature = Feature(geometry=point)
                features.append(feature)

    feature_collection = FeatureCollection(features)

    with open(output_geojson, "w") as f:
        f.write(json.dumps(feature_collection))

# Replace the paths with the actual file paths
input_glb = 'path/to/your/glb/file.glb'
output_geojson = 'path/to/output/geojson/file.geojson'

glb_to_geojson(input_glb, output_geojson)



from pygltflib import GLTF2

def explore_glb(input_glb):
    gltf = GLTF2().load(input_glb)

    print("Accessors:")
    for i, accessor in enumerate(gltf.accessors):
        print(f"  Accessor {i}: Type: {accessor.type}, ComponentType: {accessor.componentType}, BufferView: {accessor.bufferView}")

    print("\nBuffer Views:")
    for i, buffer_view in enumerate(gltf.bufferViews):
        print(f"  BufferView {i}: Buffer: {buffer_view.buffer}, ByteOffset: {buffer_view.byteOffset}, ByteLength: {buffer_view.byteLength}")

    print("\nBuffers:")
    for i, buffer in enumerate(gltf.buffers):
        print(f"  Buffer {i}: ByteLength: {buffer.byteLength}")

input_glb = 'path/to/your/glb/file.glb'
explore_glb(input_glb)



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>3D Tiles</title>
  <script src="https://cesium.com/downloads/cesiumjs/releases/1.94/Build/Cesium/Cesium.js"></script>
  <link href="https://cesium.com/downloads/cesiumjs/releases/1.94/Build/Cesium/Widgets/widgets.css" rel="stylesheet">
  <style>
    html, body, #cesiumContainer {
      width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;
    }
  </style>
</head>
<body>
  <div id="cesiumContainer"></div>
  <script>
    // CesiumJSのビューワーを作成
var viewer = new Cesium.Viewer('cesiumContainer', {
  terrainProvider: Cesium.createWorldTerrain()
});

// タイルセットを読み込み
var tileset = viewer.scene.primitives.add(
  new Cesium.Cesium3DTileset({
    url: 'path/to/your/tileset.json'
  })
);

// タイルセットが読み込まれた後、カメラを移動
viewer.zoomTo(tileset);
  </script>
</body>
</html>



{
  "asset": {
    "version": "1.0"
  },
  "geometricError": 500,
  "root": {
    "boundingVolume": {
      "region": [
        0.00131972096076574,
        0.698295389460957,
        0.00132494709079788,
        0.698299770033402,
        0,
        100
      ]
    },
    "geometricError": 500,
    "refine": "ADD",
    "content": {
      "uri": "your-b3dm-file.b3dm"
    },
    "transform": [
      1, 0, 0, 0,
      0, 1, 0, 0,
      0, 0, 1, 0,
      0, 0, 0, 1
    ]
  }
}

