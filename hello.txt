import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import static org.mockito.ArgumentMatchers.anyString;

public class MyClassUtilsTest {

    @Test
    public void testRequest() {
        WebClient webClientMock = Mockito.mock(WebClient.class);
        WebClient.RequestHeadersSpec requestHeadersMock = Mockito.mock(WebClient.RequestHeadersSpec.class);
        WebClient.RequestHeadersUriSpec requestHeadersUriMock = Mockito.mock(WebClient.RequestHeadersUriSpec.class);
        WebClient.ResponseSpec responseSpecMock = Mockito.mock(WebClient.ResponseSpec.class);

        Mockito.when(webClientMock.get()).thenReturn(requestHeadersUriMock);
        Mockito.when(requestHeadersUriMock.uri(anyString())).thenReturn(requestHeadersMock);
        Mockito.when(requestHeadersMock.retrieve()).thenReturn(responseSpecMock);
        Mockito.when(responseSpecMock.bodyToMono(String.class)).thenReturn(Mono.just("Mock response"));

        try (MockedStatic<WebClient> webClientMockedStatic = Mockito.mockStatic(WebClient.class)) {
            webClientMockedStatic.when(() -> WebClient.create(anyString())).thenReturn(webClientMock);
            String result = MyClassUtils.request("http://localhost");
            System.out.println(result);  // prints: "Mock response"
        }
    }
}
